;;; Starting REPL

(:require SK.Core)

(defmodule SK.Tool.Repl.Loop
  (export
   start-repl acquire-repl cleanup-repl)
  (use
   ;; base
   (Control.Concurrent ((ThreadId) forkIO))
   (Control.Concurrent.MVar ((MVar) newEmptyMVar))
   (Control.Exception (bracket catch throwIO))
   (Control.Monad (void))

   (System.IO ((Handle) hClose openTempFile))
   (System.IO.Error (isDoesNotExistError))

   ;; directory
   (System.Directory (getTemporaryDirectory removeFile))

   ;; haskeline
   (System.Console.Haskeline
    (defaultBehavior defaultSettings useFile runInputTBehavior))

   ;; sk-kernel
   (Language.SK.SKC ((SkEnv ..) runSkc))

   ;; internal
   (SK.Tool.Repl.Eval)
   (SK.Tool.Repl.Listen)
   (SK.Tool.Repl.IO)
   (SK.Tool.Repl.Types)))


;;; Starting the REPL

(defn (start-repl (-> (Maybe FilePath) (Maybe Int) SkEnv (IO ())))
  "Start REPL, maybe listen to given port number when given."
  [mb-path mb-port ske]
  (bracket
   acquire-repl
   cleanup-repl
   (\ (, _tmpfile hdl in-mv)
     (do (maybe (return ()) (. void (start-listener in-mv)) mb-port)
         (<- tid (forkIO (runSkc (eval-loop hdl in-mv) ske)))
         (let ((= rpl (read-print-loop in-mv tid))
               (= behavior (maybe defaultBehavior useFile mb-path))
               (= run (runInputTBehavior behavior defaultSettings))))
         (run-repl (run rpl) mempty)))))

(defn (acquire-repl (IO (, FilePath Handle (MVar Input))))
  "Return a file path and handle for temporary use."
  (do (<- dir getTemporaryDirectory)
      (<- (, path hdl) (openTempFile dir "sk-repl-.out"))
      (<- mvar newEmptyMVar)
      (return (, path hdl mvar))))

(defn (cleanup-repl (-> (, FilePath Handle a) (IO ())))
  "Clean up temporary file."
  [(, path hdl _)]
  (catch (do (hClose hdl)
             (removeFile path))
    (\ e (if (isDoesNotExistError e)
             (return ())
             (throwIO e)))))

(defn (start-listener (-> (MVar Input) Int (IO ThreadId)))
  "Start listner in separate thread, and return temporary file for
getting String output from statement."
  [in-mv port]
  (do (putStrLn (++ "Listening on port " (show port)))
      (forkIO (listener (fromIntegral port) in-mv))))
