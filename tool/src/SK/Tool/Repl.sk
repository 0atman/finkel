;;;; | Simple SK REPL.
;;;;
;;;; This implementation uses two threads: one for reading and printing,
;;;; and another for evaluating and modifying the SkEnv. Using `MVar'
;;;; containing `Code' to communicate between the threads. This design
;;;; shall be easier to support reading forms from other sources than
;;;; line oriented user input, e.g. network sockets.

(require SK.Core)

(defmodule SK.Tool.Repl
  (export
   replMain repl-env)
  (load
   ;; base
   (Prelude)

   ;; sk-kernel
   (Language.SK)

   ;; internal
   (SK.Tool.Repl.Macro))
  (use
   ;; base
   (Control.Monad (mplus))
   (Control.Monad.IO.Class ((MonadIO ..)))
   ;; (System.Exit (exitFailure))
   (System.Console.GetOpt
    ((ArgDescr ..) (ArgOrder ..) (OptDescr ..) getOpt usageInfo))
   (System.Environment (getProgName))

   ;; sk-kernel
   (Language.SK.Expand (specialForms))
   (Language.SK.Make (defaultSkEnv))
   (Language.SK.SKC ((SkEnv ..) (EnvMacros) makeEnvMacros mergeMacros))

   ;; sk-lang
   (SK.Core)

   ;; Internal
   (SK.Tool.CLI)
   (SK.Tool.Repl.Macro)
   (SK.Tool.Repl.Loop)))



;;; Exported

(defn (replMain (=> (CLI m) (-> [String] (m ()))))
  "Main entry point function for REPL."
  [args]
  (case (getOpt Permute descrs args)
    (, o _ []) (act (foldl (flip id) initial-option o))
    (, _ _ es) (print-errors es)))

(defn (repl-env SkEnv)
  "Environment value used by the sk REPL."
  (let ((= modules ["Prelude"])
        (= macros (mergeMacros specialForms replMacros)))
    (defaultSkEnv {envContextModules modules
                   envMacros macros
                   envDefaultMacros macros})))


;;; Internal

(data ReplMode
  Help
  Run)

(data ReplOption
  (ReplOption {repl-mode ReplMode
               repl-listen-port (Maybe Int)}))

(defn (initial-option ReplOption)
  (ReplOption {repl-mode Run
               repl-listen-port Nothing}))

(defn (descrs [OptDescr (-> ReplOption ReplOption)])
  [(Option [\h] ["help"]
           (NoArg (\ o (o {repl-mode Help})))
           "Show this help and exit")
   (Option [\l] ["listen"]
           (OptArg (\ mb-port o
                     (let ((= port
                             (mplus (fmap read mb-port)
                                    (Just 50321))))
                       (o {repl-mode Run
                           repl-listen-port port})))
                   "PORT")
           "Listen to port (default: 50321)")])

(defn (act (=> (CLI m) (-> ReplOption (m ()))))
  [ro]
  (case (repl-mode ro)
    Help print-usage
    Run (liftIO (start-repl (repl-listen-port ro) repl-env))))

(defn (print-errors (=> (CLI m) (-> [String] (m ()))))
  [errs]
  (do (putString (concat errs))
      print-usage
      (exitWith (ExitFailure 1))))

(defn (print-usage (=> (CLI m) (m ())))
  (do (<- name (liftIO getProgName))
      (putString
       (unlines
        [(concat ["USAGE: " name " repl [OPTIONS]"])
         ""
         "Start interactive REPL."
         ""
         (usageInfo "OPTIONS:\n" descrs)]))))

;;; Default macros imported in REPL. These macros always get imported
;;; after loading compiled modules.
(macrolet ((the-macros ()
             `[,@(map (\ mac `(, ,mac ,(qSymbol mac)))
                      (++ (exported-macros SK.Core)
                          (exported-macros SK.Tool.Repl.Macro)))]))
  (defn (replMacros EnvMacros)
    (makeEnvMacros (the-macros))))
