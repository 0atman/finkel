;;; Module for showing versions.

(require SK.Core)

(defmodule SK.Version
  (use
   ;; base
   (Data.Version (showVersion))
   (System.Console.GetOpt
    ((ArgDescr ..) (ArgOrder ..) (OptDescr ..) getOpt usageInfo))
   (System.Environment (getProgName))

   ;; ghc
   (Config (cProjectVersion))

   ;; sk-kernel
   (qualified Paths_sk_kernel)

   ;; Internal
   (qualified Paths_sk_lang))
  (export versionMain))


;;; Main entry point

(defn (versionMain (-> [String] (IO ())))
  [args]
  (case (getOpt Permute version-descrs args)
    (, os _ []) (show-version (foldr const AllVersions os))
    (, _ _ es)  (do (mapM_ putStr es)
                    (putStrLn "")
                    print-version-help)))


;;; Internal

(data VersionMode
  AllVersions
  GhcVersion
  KernelVersion
  LangVersion
  VersionHelp
  (deriving (Eq Show)))

(defn (version-descrs [OptDescr VersionMode])
  [(Option [\a] ["all"]
           (NoArg AllVersions)
           "show all versions (default)")
   (Option [\g] ["ghc"]
           (NoArg GhcVersion)
           "show ghc version")
   (Option [\k] ["kernel"]
           (NoArg KernelVersion)
           "show sk kernel version")
   (Option [\l] ["lang"]
           (NoArg LangVersion)
           "show sk lang version")
   (Option [\h] ["help"]
           (NoArg VersionHelp)
           "show this help and exit")])

(defn (show-version (-> VersionMode (IO ())))
  [mode]
  (case mode
    AllVersions (do print-lang-version
                    print-kernel-version
                    print-ghc-version)
    GhcVersion print-ghc-version
    KernelVersion print-kernel-version
    LangVersion print-lang-version
    VersionHelp print-version-help))

(defn (print-ghc-version (IO ()))
  (putStrLn (++ "ghc " cProjectVersion)))

(defn (print-kernel-version (IO ()))
  (putStrLn (++ "sk-kernel " sk-kernel-version)))

(defn (print-lang-version (IO ()))
  (putStrLn (++ "sk-lang " sk-lang-version)))

(defn (print-version-help (IO ()))
  (do (<- name getProgName)
      (putStr
       (unlines
        [(concat ["USAGE: " name " version [OPTIONS]"])
         ""
         "  Show version information."
         ""
         (usageInfo "OPTIONS:" version-descrs)]))))

(defn (sk-lang-version String)
  (showVersion Paths_sk_lang.version))

(defn (sk-kernel-version String)
  (showVersion Paths_sk_kernel.version))
