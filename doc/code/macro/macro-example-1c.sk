#p(language DataKinds)

(defmodule Main
  (require (SK.Prelude))
  (import (Data.Proxy)))

(data Nat
  Zero
  (Succ Nat))

(macrolet ((make-nat-synonyms [n]
             (let ((:: f (-> (, Code [Code]) Int (, Code [Code])))
                   (= f (, prev acc) i
                     (let ((= current `('Succ ,prev)))
                       (, current
                          (: `(type ,(make-symbol (++ "N" (show i)))
                                ,current)
                             acc)))))
               (case (fromCode n)
                 (Just n') `(:begin
                              ,@(snd (foldl f (, ''Zero []) [1 .. n'])))
                 Nothing (error "not an integer")))))
  (make-nat-synonyms 8))

(defn (:: main (IO ()))
  (do (putStrLn ";;; macro-example-1c ;;;")
      (print (:: Proxy (Proxy N8)))))
