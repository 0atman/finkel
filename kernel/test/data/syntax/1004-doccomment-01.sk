#p(LANGUAGE RankNTypes)
(:docn "
Module      : Main
Description : Module for documentation comment
Copyright   : (c) someone, someyear
License     : GPL-3
Maintainer  : foo@bar.com
Stability   : experimental
Portability : POSIX

Module header documentation.

This comment is written inside `:docn' form.")

(module Main
  (:dh1 "The main function")
  (:docn "Main entry point function.
This function is performed from compiled executable.")
  main

  (:dh1 "Data and types")
  (:dock auxdt)
  (D1 ..) (D2 ..) (D3 ..)

  (:dh1 "Functions")
  (:dock auxfn)
  f1 f2 f3 f4 f5 f6)


;;; Functions

(:dock auxfn "Section documentation for auxiliary functions.")

(:docn "Documentation of 'f1'")
(:: f1 (-> String (IO ())))
(= f1 str (putStrLn (++ "From f1: " str)))

(:docn "Documentation of 'f2'")
(:: f2 (-> String (IO ())))
(= f2 (. putStrLn (++ "From f2: ")))

(:docn "Documentation of 'f3'")
(:: f3 (-> Int (:docp "Single line comment")
           String
           (:docp "Multiple lines comment for the second argument.

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod
tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim
veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea
commodo consequat. Duis aute irure dolor in reprehenderit in voluptate
velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint
occaecat cupidatat non proident, sunt in culpa qui officia deserunt
mollit anim id est laborum.")
           (IO ())
           (:docp "Action to print given message for given times")))
(= f3 n msg
  (sequence_ (replicate n (putStrLn msg))) )

(:: f4 (forall a (-> a (:docp "Documentation for first argument.")
                     a (:docp "Documentation for result."))))
(:docp "Documentation for 'f4'.

This function contains unnecessary explicit @forall@ keyword.")
(= f4 x x)

(:: f5
  (-> (forall a (-> a a))
      (:docp "Documentation for first arg.")
      (, Char Bool)
      (:docp "Documentation for result.")))
(:docp "Documentation for 'f5'.

This function contains rank-n type function argument.")

(= f5 f (, (f \a) (f True)))

(:: f6
  (=> (Show a) (Show b)
      (-> a (:docp "Documentation for first arg.")
          b (:docp "Documentation for second arg.")
          String (:docp "Documentation for result."))))
(:docp "Documentation for 'f6'.

Example for writing documentation for argument, with the function
containing type class constraints. This documentation comment includes
@since@ metadata.

@since 1.2.3")

(= f6 a b
  (++ "f6: a=" (show a) ", b=" (show b)))


;;; Data and types

(:dock auxdt "Section documentation for auxiliary data and types.")

;;; Unlike haddock comment in Haskell source code, constructor
;;; documentation comments are permitted for ':docp' forms only.

(:docn "Documentation for data type 'D1'.")
(data (D1 a b)
  (D1a a)
  (:docp "Documentation for 'D1a'.")
  (D1b #p(UNPACK) !b)
  (:docp "Documentation for 'D1b'.

This comment contains empty lines.

To add a line break in generated HTML document, need to add an empty
line. Otherwise, line breaks in source codes will disappear.")
  (D1ab a b)
  (:docp "Documentation for 'D1ab'.")
  (deriving (Eq Show)))

(newtype (D2 a)
  (D2 a)
  (:docp "Documentation for constructor."))
(:docp "Documentation for top level newtype declaration.")

(data (D3 a)
  (D3a {d3_f1 Int (:docp "Documentation for 'd3_f1' field.")
        d3_f2 a
        (:docp "Documentation for 'd3_f2' field.

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod
tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim
veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea
commodo consequat. Duis aute irure dolor in reprehenderit in voluptate
velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint
occaecat cupidatat non proident, sunt in culpa qui officia deserunt
mollit anim id est laborum.")
        (d3_f3 d3_f4) a
        (:docp "Documentation for 'd3_f3' and 'd3_f4' fields.")})
  (:docp "Documentation for 'D3a'.")
  (D3b a a)
  (:docp "Documentation for 'D3b'.")
  (deriving (Eq Show)))
(:docp "Documentation for top level 'D3' data type declaration.")


;;; Main function

(:: main (IO ()))
(:docp "Documentation of 'main'.")
(= main
  (do (putStrLn "documentation comment tests.")
      (f1 "foo")
      (f2 "bar")
      (f3 3 "buzz")))
