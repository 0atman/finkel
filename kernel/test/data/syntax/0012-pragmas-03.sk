;;;; Form containing language pragmas, part 2.

;;; `ExistentialQuantification' did not work well with
;;; `OverloadedLists', so separate test file.

#p(LANGUAGE ExistentialQuantification)
#p(LANGUAGE RankNTypes)
#p(LANGUAGE GADTs)

(module Main)

;;; ExistentialQuantification
(data AnyShow1
  (forall a (=> (Show a) (AnyShow1 a))))

(instance (Show AnyShow1)
  (= show (AnyShow1 a)
    (concat ["(AnyShow " (show a) ")"])))

(data AnyShow2
  (forall a b (=> (Show a) (Show b) (AnyShow2 {as2a a as2b b}))))

(instance (Show AnyShow2)
  (= show (AnyShow2 {as2a a as2b b})
    (concat ["(AnyShow2 " (show a) " " (show b) ")"])))

;; RankNtypes
(:: f3 (-> (forall a (-> a a)) (, Char Bool)))
(= f3 f (, (f \a) (f True)))

;; GADTs again, with UNPACK pragmas.

(data (G2 a)
  (:: G2a (-> #p(UNPACK) !(Maybe a) (G2 a)))
  (:: G2b (-> #p(UNPACK) !Int (G2 Int)))
  (:: G2c (-> #p(UNPACK) !a #p(UNPACK) !Int (G2 a))))

(instance (=> (Show a) (Show (G2 a)))
  (= show (G2a a) (concat ["G2a (" (show a) ")"]))
  (= show (G2b a) (concat ["G2b (" (show a) ")"]))
  (= show (G2c a b) (concat ["G2c (" (show a) " " (show b) ")"])))

(:: gadt2 (-> Int (IO ())))
(= gadt2 n
  (do (print (G2a (Just \x)))
      (print (G2b n))
      (print (G2c n 43))))

(:: main (IO ()))
(= main
  (do (print [(AnyShow1 (:: 42 Int))
              (AnyShow1 False)
              (AnyShow1 \x)])
      (print [(AnyShow2 (:: 42 Int) (:: 43 Integer))
              (AnyShow2 False (Just \x))
              (AnyShow2 \x "bar")])
      (print (f3 id))
      (gadt2 42)))
