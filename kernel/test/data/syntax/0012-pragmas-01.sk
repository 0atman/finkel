;;; -*- mode: sk -*-

(module Main)

;;; 12.1 Inlining

(:: inlineMe Int)
(= inlineMe 42)
#p(INLINE inlineMe)

(:: dontInlineMe Int)
(= dontInlineMe 43)
#p(NOINLINE dontInlineMe)

(:: iAmInlinable Int)
(= iAmInlinable 44)
#p(INLINABLE iAmInlinable)

(data (I1 a) (I1 a))

(instance (=> (Show a) (Show (I1 a)))
  (= showsPrec _ (I1 a) (showString (++ "I1 " (show a))))
  #p(INLINE showsPrec))

(:: inlineprgm (IO ()))
(= inlineprgm
  (do (print inlineMe)
      (print dontInlineMe)
      (print iAmInlinable)
      (print (show (I1 True)))))

;;; 12.2 Specialization

(:: specializeMe1 (=> (Num a) (Show a) (-> a String)))
(= specializeMe1 x (show (+ x 1)))

#p(SPECIALIZE (:: specializeMe1 (-> Int String)))
#p(SPECIALIZE (:: specializeMe1 (-> Integer String)))
#p(SPECIALIZE (:: specializeMe1 (-> Float String)))
#p(SPECIALIZE (:: specializeMe1 (-> Double String)))

(:: specprgm (IO ()))
(= specprgm
  (do (putStrLn (specializeMe1 (:: 41 Int)))
      (putStrLn (specializeMe1 (:: 41 Integer)))
      (putStrLn (specializeMe1 (:: 41 Double)))
      (putStrLn (specializeMe1 (:: 41 Float)))))

;;; GHC extension: UNPACK

(data D1
  (C1 #p(UNPACK) (! Int)
      #p(UNPACK) (! Char))
  (deriving (Eq Show)))

(data D2
  (C2 {c2field1 #p(UNPACK) (! Int)
       c2field2 #p(UNPACK) (! Char)})
  (deriving (Eq Show)))

(:: unpackprgm (IO ()))
(= unpackprgm
  (do (print (C1 42 \x))
      (print (C2 42 \x))))

(:: main (IO ()))
(= main
  (do inlineprgm
      specprgm
      unpackprgm))
