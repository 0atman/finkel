;;;; | Module containing orphan instance declarations.

(module SK.Repl.Orphan)

(import Control.Monad.Trans.Except)
(import System.Console.Haskeline)
(import GhcMonad)
(import SK.Core)

;;; Instance declaration for `Ghc' is defined in cabal package ghc, in a
;;; module used by ghci. This package does not expose its codes as
;;; library.
(instance (MonadException Ghc)
  (= (controlIO f)
    (Ghc (\ (s)
           (controlIO
            (\ ((RunIO run0))
              (let ((= run1 (RunIO
                             (\ (m)
                               (fmap (. Ghc const)
                                     (run0 (unGhc m s)))))))
                (fmap (flip unGhc s) (f run1)))))))))

(macrolet ((derive-monad-exception (ctxs ty con unCon)
             (return
               `(instance (=> ,ctxs (MonadException ,ty))
                  (= (controlIO f)
                    (,con (controlIO
                           (\ ((RunIO run0))
                             (let ((= run1 (RunIO
                                            (. (fmap ,con)
                                               (. run0 ,unCon)))))
                               (fmap ,unCon (f run1)))))))))))
  (derive-monad-exception
   (MonadException m) (ExceptT e m) ExceptT runExceptT)
  (derive-monad-exception
   () Skc Skc unSkc))

;; (instance (=> (MonadException m) (MonadException (ExceptT e m)))
;;   (= controlIO (mkControlIO ExceptT runExceptT)))

;; (instance (MonadException Skc)
;;   (= controlIO (mkControlIO Skc unSkc)))

;; (= (mkControlIO con unCon f)
;;   (con (controlIO
;;          (\ ((RunIO run0))
;;            (let ((= run1 (RunIO
;;                           (. (fmap con)
;;                              (. run0 unCon)))))
;;              (fmap unCon (f run1)))))))
