;;;; Module containing codes for environment management of current REPL.
(module SK.Repl.Env
  ;; Funcall and environment management.
  funcall1
  symbolValue
  lookupHValue
  putTheHscEnv
  getTheHscEnv

  ;; Printer
  prit
  set-repl-print-name)

;; base
(import Data.IORef)
(import System.IO.Unsafe)
(import Unsafe.Coerce)

;; sk-kernel
(import Language.SK.Builder (mkRdrName))
(import Language.SK.Form)
(import Language.SK.GHC
        ((HValue) (HscEnv) fsLit getHValue hscTcRnLookupRdrName
                  hsc_IC localRef modifySession noLoc withForeignRef))
(import Language.SK.SKC ((Skc ..)))

;; internal
(import SK.Repl.GHC (parseName setInteractivePrintName))


;;; Funcall and lookup

(:: funcall1 (-> Code a (IO r)))
(= funcall1 name arg1
  (do (<- f (symbolValue name))
      (f arg1)))

(:: symbolValue (-> Code (IO a)))
(= symbolValue form
  (do (<- mb-hval (lookupHValue form))
      (case mb-hval
        Nothing   (error (++ "symbolValue: symbol not found "
                             (show form)))
        (Just hv) (return (unsafeCoerce hv)))))

(:: lookupHValue (-> Code (IO (Maybe HValue))))
(= lookupHValue form
  (where (case (unCode form)
           (Atom (ASymbol name)) (go name)
           (Atom (AString name)) (go (fsLit name))
           _                     (return Nothing))
    (= go name
      (do (let ((= rname (noLoc (mkRdrName name)))))
          (<- env getTheHscEnv)
          (<- (: name' _) (hscTcRnLookupRdrName env rname))
          (<- fref (getHValue env name'))
          (fmap Just (withForeignRef fref localRef))))))
##(NOINLINE lookupHValue)


;;; Global `HscEnv'

;;; Global value managed with IORef, brought to non-IO world with
;;; `unsafePerformIO', as usual.
(:: theHscEnv (IORef (IORef HscEnv)))
(= theHscEnv
  (unsafePerformIO (newIORef (error "theHscEnv: not initialized"))))
##(NOINLINE theHscEnv)

(:: putTheHscEnv (-> (IORef HscEnv) (IO ())))
(= putTheHscEnv (writeIORef theHscEnv))

(:: getTheHscEnv (IO HscEnv))
(= getTheHscEnv (>>= (readIORef theHscEnv) readIORef))


;;; Printer

;;; Like `Prelude.print', but without newline at the end.
(:: prit (=> (Show a) (-> a (IO ()))))
(= prit x (putStr (show x)))

;;; Action to set interactive print function name to `SK.Repl.Env.pr'.
(:: set-repl-print-name (Skc ()))
(= set-repl-print-name
  (do (<- (: name _) (parseName "SK.Repl.Env.prit"))
      (modifySession
       (\ he
         (he {hsc_IC (setInteractivePrintName (hsc_IC he) name)})))))
