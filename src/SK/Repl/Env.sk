;;;; Module containing codes for environment management of current REPL.
(module SK.Repl.Env
  funcall1
  symbolValue
  lookupHValue
  putTheHscEnv
  getTheHscEnv)

(import Data.IORef)
(import System.IO.Unsafe)
(import Unsafe.Coerce)

(import Language.SK.Builder)
(import Language.SK.Form)
(import Language.SK.GHC)


;;; Funcall and lookup

(:: funcall1 (-> Code a (IO r)))
(= funcall1 name arg1
  (do (<- f (symbolValue name))
      (f arg1)))

(:: symbolValue (-> Code (IO a)))
(= symbolValue form
  (do (<- mb-hval (lookupHValue form))
      (case mb-hval
        Nothing   (error (++ "symbolValue: symbol not found "
                             (show form)))
        (Just hv) (return (unsafeCoerce hv)))))

(:: lookupHValue (-> Code (IO (Maybe HValue))))
(= lookupHValue form
  (where (case (unLocLForm form)
           (Atom (ASymbol name)) (go name)
           (Atom (AString name)) (go (fsLit name))
           _                     (return Nothing))
    (= go name
      (do (let ((= rname (noLoc (mkRdrName name)))))
          (<- env getTheHscEnv)
          (<- (: name' _) (hscTcRnLookupRdrName env rname))
          (<- fref (getHValue env name'))
          (fmap Just (withForeignRef fref localRef))))))
##(NOINLINE lookupHValue)


;;; Global `HscEnv'

;;; Global value managed with IORef, brought to non-IO world with
;;; `unsafePerformIO', as usual.
(:: theHscEnv (IORef (IORef HscEnv)))
(= theHscEnv
  (unsafePerformIO (newIORef (error "theHscEnv: not initialized"))))
##(NOINLINE theHscEnv)

(:: putTheHscEnv (-> (IORef HscEnv) (IO ())))
(= putTheHscEnv (writeIORef theHscEnv))

(:: getTheHscEnv (IO HscEnv))
(= getTheHscEnv (>>= (readIORef theHscEnv) readIORef))
