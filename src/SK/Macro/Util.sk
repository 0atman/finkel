;;;; Utility codes used by fundamental macros.

;;; This module contains function used by fundamental macros.

(module SK.Macro.Util)

(import SK.Core)

(:: partition-by-dot (-> [Code] (, [Code] [Code])))
(= (partition-by-dot xs)
  (let ((= (, pre post) (break (== '.) xs))
        (= post' (case post
                   ([] [])
                   ((: _ rest) rest))))
    (, pre post')))

(:: pre-match (-> [Code] Code Code))
(= (pre-match pre post)
  (let ((= (f a b)
          `(: ,a ,b)))
    `(List ,(foldr f post pre))))

(:: pmatch-list-args (-> Code Code))
(= (pmatch-list-args form)
  ;; The `rest' argument is passed as [Code], not a Code. Might
  ;; be more consistent to pass the rest as Code. To pass Code,
  ;; need to wrap the pattern matched variable with `List'
  ;; constructor.
  (case form
    ((List xs)
     (let ((= (, pre post) (partition-by-dot xs)))
       (case post
         ([]          `(List ,xs))
         ((: post' _) (pre-match pre post')))))
    (_ form)))

(:: cons' (-> LCode LCode LCode))
(= (cons' x xs)
  (case xs
    ((L l (TList ys)) (L l (TList (: x ys))))
    ((L l y) (L l (TList [x (L l y)])))))
