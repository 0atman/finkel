;;; -*- mode: sk -*-
;;;
;;; Tests for tokens and literal values. Unlike Haskell, lines starting
;;; with `;' are comments.

(module Main)

(= main
  (do
    ;; 2.5 Numeric Literals

    ;; Literal integers.
    (print 42)
    (print -24)
    (print 0x123abcdef)
    (print -0xdeadbeaf)
    (print 0o7654321)
    (print -0o7777)

    ;; Fractional number.
    (print 1.234567)
    (print -8.9)

    ;; 2.6 Character and String Literals.
    (print \a) (print \0) (print \+) (print \')
    (print \)) (print \[) (print \;) (print \\)

    (putChar \a)
    (putChar \sp)               ; space
    (putChar \b)
    (putChar \ht)               ; horizontal tab
    (putChar \c)
    (putChar \nul)              ; \NUL
    (putChar \lf)               ; line feed

    (putStrLn "string literal") ; Simple string

    ;; String containing escaped `"'
    (putStrLn "string with \"double quotes\".")

    ;; String containing escaped newlines and tabs.
    (putStrLn "string with newlines: \n\n\nand tabs: \t\t\t.")

    ;; Unit.
    (print ())

    ;; List literals.
    (print [1 2 3 4 5])
    (print (: True (: False [])))

    ;; List containing expressions.
    (print [(if (> 2 3)
                (do (<- x (return 100))
                    (<- y (return 23))
                    (return (+ x y)))
                (return 123))
            (Left "foo")])

    ;; Value names not starting with but containing `quote'.
    (let ((:: (x x' x'') Int)
          (= x 100)
          (= x' 200)
          (= x'' 300)))
    (print x)
    (print x')
    (print x'')))
