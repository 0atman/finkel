;;; -*- mode: sk -*-
;;;
;;; 5.3 Import Declarations

(module Main)

(import Data.Char)
(import System.IO ())
(import Control.Monad as M)
(import Data.Complex ((Complex ..) realPart imagPart mkPolar))
(import Data.Ratio hiding (Ratio Rational numerator %))

(import qualified Data.List)
(import qualified Data.Map as Map)
(import qualified Data.Maybe as Mb)
(import qualified Data.Bits as Bt (shiftL shiftR))
(import qualified System.Environment as Env hiding (getArgs getEnv))


(:: f1 (Map.Map String Int))
(= f1
  (Map.fromList [(, "k1" 1) (, "k2" 2)]))

(:: main (IO ()))
(= main
  (do (putStrLn (map toUpper "import declarations"))
      (print (Data.List.nub [1 2 3 2 1 2 3 2 1]))
      (print (Mb.fromMaybe 123 Nothing))
      (M.when (< 3 5)
              (putStrLn "Control Monad imported as `M'"))
      (let ((= c (mkPolar 1.2 3.4))))
      (print (realPart c))
      (print (imagPart c))
      (print (Bt.shiftL (:: 8 Int) 8))
      (>>= Env.getProgName putStrLn)
      (print f1)))
